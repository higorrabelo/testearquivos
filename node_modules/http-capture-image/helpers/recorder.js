//  Created by Deivid Oliveira on 05/07/2019.
//
const moment = require('moment')
const path = require('path')
const request = require('request')
const fs = require('fs')

var HTTPRecorder = function(config){
  this.config = config
  this.equipment = config.equipment
  this.camera = config.camera
  this.url = config.url
  this.username = config.username
  this.password = config.password
  this.root = config.root || '..\\camera'
  this.categoryType = config.type || 'image'
  this.directoryPathFormat = config.directoryPathFormat || 'DD-MM-YYYY'
  this.fileNameFormat = config.fileNameFormat || 'YYYY-MM-DD-h-mm-ss'
}

HTTPRecorder.prototype = {
  
  getDirectoryPath: function() {
    return path.join(this.root, (this.equipment ? this.equipment : ''), (this.camera ? this.camera : ''))
  },
  
  getTodayPath: function() {
    return path.join(this.root, moment().format(this.directoryPathFormat), (this.equipment ? this.equipment : ''), (this.camera ? this.camera : '') )
  },

  getMediaTypePath: function() {
    return path.join(this.getTodayPath(), this.categoryType)
  },

  getFilename: function(folderPath) {
    return path.join(folderPath, moment().format(this.fileNameFormat) + this.getExtenstion())
  },

  getPathWeb: function(filename) {
    console.log("filename "+filename)
    return filename.replace(path.join(this.root), '')
  },

  getExtenstion: function() {
    if (this.categoryType === 'audio') {
      return '.avi'
    }
    if (this.categoryType === 'image') {
      return '.jpg'
    }

    return '.mp4'
  },

  captureImage: function(config, cb) {
    var self = this
    var auth = "Basic " + new Buffer(self.username + ":" + self.password).toString("base64");

    self.download({
      url : self.url,
      headers : {
        "Authorization" : auth
      }
    }, config.filename, function(){
      console.log(`done`);
        cb(false, config.filename)
    });
  },

  download: function(uri, filename, callback){
    request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);
  }
}

module.exports = HTTPRecorder
